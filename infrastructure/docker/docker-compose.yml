# Gov Contracts AI - Data Layer Services
# Phase 1: Core Data Infrastructure (MinIO, PostgreSQL, Redis)

networks:
  gov-contracts-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

services:
  # ============================================================================
  # MinIO - S3-Compatible Object Storage (Data Lake)
  # ============================================================================
  minio:
    build:
      context: ./minio
      dockerfile: Dockerfile
    container_name: minio
    restart: unless-stopped
    ports:
      - "9100:9100"   # S3 API (usando 9100 para evitar conflitos)
      - "9101:9101"   # Console UI (usando 9101 para evitar conflitos)
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_BROWSER: ${MINIO_BROWSER:-on}
      MINIO_REGION_NAME: ${MINIO_REGION_NAME:-us-east-1}
      MINIO_PROMETHEUS_AUTH_TYPE: public
    volumes:
      # Mount HDD 1.81TB as data backend
      - ${MINIO_DATA_DIR:-/var/storage}:/data
    networks:
      gov-contracts-network:
        ipv4_address: 172.30.0.10
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9100/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    command: server /data --console-address ":9101"

  # MinIO bucket initialization (runs once)
  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - ./minio/init-buckets.sh:/init-buckets.sh:ro
    networks:
      - gov-contracts-network
    entrypoint: /bin/sh
    command: -c "/init-buckets.sh"

  # ============================================================================
  # PostgreSQL 16 - Data Warehouse (Structured Data)
  # ============================================================================
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5433:5432"   # PostgreSQL (usando 5433 para evitar conflitos)
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev123}
      POSTGRES_DB: ${POSTGRES_DB:-govcontracts}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---encoding=UTF8 --locale=en_US.UTF-8}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
      TZ: ${TZ:-America/Sao_Paulo}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      gov-contracts-network:
        ipv4_address: 172.30.0.20
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-govcontracts}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    shm_size: 256mb

  # ============================================================================
  # Redis 7 - Caching & Session Management
  # ============================================================================
  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    container_name: redis
    restart: unless-stopped
    ports:
      - "6380:6379"   # Redis (usando 6380 para evitar conflitos)
    environment:
      TZ: ${TZ:-America/Sao_Paulo}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      gov-contracts-network:
        ipv4_address: 172.30.0.30
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    command: redis-server /usr/local/etc/redis/redis.conf

  # ============================================================================
  # Adminer - Database Management UI (Optional, for development)
  # ============================================================================
  adminer:
    image: adminer:latest
    container_name: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: nette
    networks:
      - gov-contracts-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - dev

  # ============================================================================
  # RedisInsight - Redis Management UI (Optional, for development)
  # ============================================================================
  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    ports:
      - "5540:5540"
    volumes:
      - redis_data:/db
    networks:
      - gov-contracts-network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - dev
